# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QTabWidget, QInputDialog, QLineEdit
from PyQt5.QtCore import QDate, QTime
import sys

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(411, 509)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setAcceptDrops(False)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_add = QtWidgets.QWidget()
        self.tab_add.setObjectName("tab_add")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_add)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.cbox_city = QtWidgets.QComboBox(self.tab_add)
        self.cbox_city.setObjectName("cbox_city")
        self.gridLayout.addWidget(self.cbox_city, 3, 2, 1, 1)
        self.dateEdit = QtWidgets.QDateEdit(self.tab_add)
        self.dateEdit.setWrapping(False)
        self.dateEdit.setFrame(True)
        self.dateEdit.setProperty("showGroupSeparator", False)
        self.dateEdit.setMaximumDateTime(QtCore.QDateTime(QtCore.QDate(2022, 10, 23), QtCore.QTime(23, 59, 59)))
        self.dateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(1900, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateEdit.setDisplayFormat("d.MM.yyyy")
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.gridLayout.addWidget(self.dateEdit, 2, 1, 1, 1)
        self.timeEdit = QtWidgets.QTimeEdit(self.tab_add)
        self.timeEdit.setCalendarPopup(True)
        self.timeEdit.setTime(QtCore.QTime(12, 0, 0))
        self.timeEdit.setObjectName("timeEdit")
        self.gridLayout.addWidget(self.timeEdit, 2, 2, 1, 1)
        self.lbl_name = QtWidgets.QLabel(self.tab_add)
        self.lbl_name.setObjectName("lbl_name")
        self.gridLayout.addWidget(self.lbl_name, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem, 8, 1, 1, 1)
        self.txt_surname = QtWidgets.QLineEdit(self.tab_add)
        self.txt_surname.setObjectName("txt_surname")
        self.gridLayout.addWidget(self.txt_surname, 1, 1, 1, 2)
        self.lbl_surname = QtWidgets.QLabel(self.tab_add)
        self.lbl_surname.setObjectName("lbl_surname")
        self.gridLayout.addWidget(self.lbl_surname, 1, 0, 1, 1)
        self.lbl_age = QtWidgets.QLabel(self.tab_add)
        self.lbl_age.setObjectName("lbl_age")
        self.gridLayout.addWidget(self.lbl_age, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 4, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 6, 0, 1, 1)
        self.txt_name = QtWidgets.QLineEdit(self.tab_add)
        self.txt_name.setObjectName("txt_name")
        self.gridLayout.addWidget(self.txt_name, 0, 1, 1, 2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 6, 1, 1, 1)
        self.btn_save = QtWidgets.QPushButton(self.tab_add)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_save.sizePolicy().hasHeightForWidth())
        self.btn_save.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        self.btn_save.setFont(font)
        self.btn_save.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.btn_save.setCheckable(False)
        self.btn_save.setObjectName("btn_save")
        self.gridLayout.addWidget(self.btn_save, 6, 2, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem4, 5, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(10, -1, -1, -1)
        self.horizontalLayout_3.setSpacing(15)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.rb_male = QtWidgets.QRadioButton(self.tab_add)
        self.rb_male.setChecked(True)
        self.rb_male.setObjectName("rb_male")
        self.horizontalLayout_3.addWidget(self.rb_male)
        self.rb_female = QtWidgets.QRadioButton(self.tab_add)
        self.rb_female.setEnabled(True)
        self.rb_female.setTabletTracking(False)
        self.rb_female.setAcceptDrops(False)
        self.rb_female.setChecked(False)
        self.rb_female.setObjectName("rb_female")
        self.horizontalLayout_3.addWidget(self.rb_female)
        self.gridLayout.addLayout(self.horizontalLayout_3, 4, 1, 1, 2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(20)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.cb_python = QtWidgets.QCheckBox(self.tab_add)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_python.sizePolicy().hasHeightForWidth())
        self.cb_python.setSizePolicy(sizePolicy)
        self.cb_python.setChecked(False)
        self.cb_python.setObjectName("cb_python")
        self.horizontalLayout_2.addWidget(self.cb_python)
        self.cb_flutter = QtWidgets.QCheckBox(self.tab_add)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_flutter.sizePolicy().hasHeightForWidth())
        self.cb_flutter.setSizePolicy(sizePolicy)
        self.cb_flutter.setObjectName("cb_flutter")
        self.horizontalLayout_2.addWidget(self.cb_flutter)
        self.cb_js = QtWidgets.QCheckBox(self.tab_add)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_js.sizePolicy().hasHeightForWidth())
        self.cb_js.setSizePolicy(sizePolicy)
        self.cb_js.setObjectName("cb_js")
        self.horizontalLayout_2.addWidget(self.cb_js)
        self.gridLayout.addLayout(self.horizontalLayout_2, 5, 1, 1, 2)
        self.txt_result = QtWidgets.QTextEdit(self.tab_add)
        self.txt_result.setEnabled(False)
        self.txt_result.setObjectName("txt_result")
        self.gridLayout.addWidget(self.txt_result, 9, 1, 1, 2)
        self.gridLayout_3.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_add, "")
        self.tab_list = QtWidgets.QWidget()
        self.tab_list.setObjectName("tab_list")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_list)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.btn_edit = QtWidgets.QPushButton(self.tab_list)
        self.btn_edit.setObjectName("btn_edit")
        self.horizontalLayout_5.addWidget(self.btn_edit)
        self.btn_remove = QtWidgets.QPushButton(self.tab_list)
        self.btn_remove.setObjectName("btn_remove")
        self.horizontalLayout_5.addWidget(self.btn_remove)
        self.btn_up = QtWidgets.QPushButton(self.tab_list)
        self.btn_up.setObjectName("btn_up")
        self.horizontalLayout_5.addWidget(self.btn_up)
        self.btn_down = QtWidgets.QPushButton(self.tab_list)
        self.btn_down.setObjectName("btn_down")
        self.horizontalLayout_5.addWidget(self.btn_down)
        self.gridLayout_4.addLayout(self.horizontalLayout_5, 2, 1, 1, 2)
        spacerItem5 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_4.addItem(spacerItem5, 1, 1, 1, 1)
        self.listItems = QtWidgets.QListWidget(self.tab_list)
        self.listItems.setObjectName("listItems")
        self.gridLayout_4.addWidget(self.listItems, 0, 1, 1, 1)
        self.tabWidget.addTab(self.tab_list, "")
        self.gridLayout_2.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 411, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Form"))
        self.lbl_name.setText(_translate("MainWindow", "Name"))
        self.lbl_surname.setText(_translate("MainWindow", "Surname"))
        self.lbl_age.setText(_translate("MainWindow", "Birthdate"))
        self.btn_save.setText(_translate("MainWindow", "Save"))
        self.rb_male.setText(_translate("MainWindow", "Male"))
        self.rb_female.setText(_translate("MainWindow", "Female"))
        self.cb_python.setText(_translate("MainWindow", "Python"))
        self.cb_flutter.setText(_translate("MainWindow", "JavaScripts"))
        self.cb_js.setText(_translate("MainWindow", "Flutter"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_add), _translate("MainWindow", "Add"))
        self.btn_edit.setText(_translate("MainWindow", "Edit"))
        self.btn_remove.setText(_translate("MainWindow", "Remove"))
        self.btn_up.setText(_translate("MainWindow", "Up"))
        self.btn_down.setText(_translate("MainWindow", "Down"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_list), _translate("MainWindow", "List"))


class Color(QtWidgets.QWidget):
    def __init__(self, color):
        super(Color, self).__init__()
        self.setAutoFillBackground(True)

        palette = self.palette()
        palette.setColor(QtGui.QPalette.Window, QtGui.QColor(color))
        self.setPalette(palette)


class App(QtWidgets.QMainWindow):
    def __init__(self):
        super(App, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.btn_save.clicked.connect(self.showDialog)
        # self.ui.cb_python.clicked.connect(self.showState)
        # self.ui.rb_male.toggled.connect(self.showState)
        self.ui.tabWidget.setCurrentIndex(0)
        self.ui.cbox_city.addItems(["Adana", "Adıyaman", "Afyon", "Ağrı", "Amasya", "Ankara", "Antalya", "Artvin", "Aydın", "Balıkesir", "Bilecik", "Bingöl", "Bitlis", "Bolu", "Burdur", "Bursa", "Çanakkale", "Çankırı", "Çorum", "Denizli", "Diyarbakır", "Edirne", "Elazığ", "Erzincan", "Erzurum", "Eskişehir", "Gaziantep", "Giresun", "Gümüşhane", "Hakkari", "Hatay", "Isparta", "İçel (Mersin)", "İstanbul", "İzmir", "Kars", "Kastamonu", "Kayseri", "Kırklareli", "Kırşehir", "Kocaeli", "Konya", "Kütahya", "Malatya", "Manisa", "Kahramanmaraş", "Mardin", "Muğla", "Muş", "Nevşehir", "Niğde", "Ordu", "Rize", "Sakarya", "Samsun", "Siirt", "Sinop", "Sivas", "Tekirdağ", "Tokat", "Trabzon", "Tunceli", "Şanlıurfa", "Uşak", "Van", "Yozgat", "Zonguldak", "Aksaray", "Bayburt", "Karaman", "Kırıkkale", "Batman", "Şırnak", "Bartın", "Ardahan", "Iğdır", "Yalova", "Karabük", "Kilis", "Osmaniye", "Düzce"])
        self.ui.btn_edit.clicked.connect(self.editItem)
        self.ui.btn_remove.clicked.connect(self.removeItem)
        self.ui.btn_up.clicked.connect(self.upItem)
        self.ui.btn_down.clicked.connect(self.downItem)

    def editItem(self):
        index = self.ui.listItems.currentRow()
        item = self.ui.listItems.item(index)

        if item is not None:
            text, ok = QInputDialog.getText(self, "Edit Item", "Edit", QLineEdit.Normal, item.text())
            if text and ok is not None:
                item.setText(text)

    def removeItem(self):
        index = self.ui.listItems.currentRow()
        item = self.ui.listItems.item(index)

        if item is None:
            return
        
        msg = QMessageBox.question(self, "Remove Item", "Do you want to remove? " + item.text(), QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if msg == QMessageBox.Yes:
            item = self.ui.listItems.takeItem(index)
            del item

    def upItem(self):
        index = self.ui.listItems.currentRow() 
        if index >= 1:
            item = self.ui.listItems.takeItem(index)
            self.ui.listItems.insertItem(index-1, item)
            self.ui.listItems.setCurrentItem(item)

    def downItem(self):
        index = self.ui.listItems.currentRow() 
        if index < self.ui.listItems.count()-1:
            item = self.ui.listItems.takeItem(index)
            self.ui.listItems.insertItem(index+1, item)
            self.ui.listItems.setCurrentItem(item)

    def save(self):
        result = f"{self.ui.txt_name.text()} {self.ui.txt_surname.text()}\n{self.ui.dateEdit.text()} - {self.ui.timeEdit.text()}\n{self.ui.cbox_city.currentText()}\n"
        cbItems = self.ui.centralwidget.findChildren(QtWidgets.QCheckBox)
        rbItems = self.ui.centralwidget.findChildren(QtWidgets.QRadioButton)

        for rb in rbItems:
            if rb.isChecked():
                result += f"{rb.text()}\n"
            self.ui.txt_result.setText(result)

        for cb in cbItems:
            if cb.isChecked():
                result += f"- {cb.text()}\n"
            self.ui.txt_result.setText(result)
        
        self.now = QDate.currentDate()
        age = self.now.year() - self.ui.dateEdit.date().year()

        self.loadStudent(self.ui.txt_name.text(), self.ui.txt_surname.text(), age)

    def loadStudent(self, name, surname, age):
        self.ui.listItems.insertItem(0, f"{name} {surname} ({age})")

    def showDialog(self):
        msg = QMessageBox.question(self, "Save", "Do you want to save?", QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if msg == QMessageBox.Yes:
            self.save()
        elif msg == QMessageBox.No:
            QtWidgets.qApp.quit()
        # msg = QMessageBox()
        # msg.setWindowTitle("Save")
        # msg.setText("Do you want to save?")
        # msg.setIcon(QMessageBox.Question)

        # msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        # msg.setDefaultButton(QMessageBox.Yes)
        # msg.buttonClicked.connect(self.popup_button)

        # x = msg.exec_()
            
    def popup_button(self, buttonMsg):
        txt = buttonMsg.text()  # "&Yes" or "&No"
        if txt == "&Yes":
            self.save()

    def showState(self, value):
        cb = self.sender()
        print(f"{cb.text()} => {cb.isChecked()}")

def app():
    app = QtWidgets.QApplication(sys.argv)
    win = App()
    win.show()
    sys.exit(app.exec_())

app()